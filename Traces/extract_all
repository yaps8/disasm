#!/bin/bash

list=`ls | grep tar | sed 's/\.tar.*//'`
newOpcodes=0

if [ -e opcodes ]; then
  echo "opcodes exist."
else
  touch opcodes
  newOpcodes=1
fi

for i in `echo $list`; do
	echo "Processing "$i
	if [ -e $i/untared ]; then
		echo "skipping untar"
	else
		rm -rf $i/
		mkdir $i
		tar xjf $i.tar.bz2 --strip=4 -C $i
		echo "Untared."
		touch $i/untared
	fi


	if [ -e $i/"traced-opcodes" ]; then
		echo "skipping trace calc."
	else
    if [ -s $i/$i"_trace.out" ]; then
      python2 ../from-traces/display_binarytrace.py $i/$i"_trace.out" > $i/$i".trace"
      python2 ../add_trace_to_opcodes.py $i/$i".trace" opcodes
      newOpcodes=1
    else
      touch $i/error
      echo "trace empty: error"
    fi
    touch $i/traced-opcodes
    echo "Traced and opcodes added"
	fi
	
	if [ -e $i/order-size ]; then
		echo "skipping ordered traces"
	else
		n_trace=`tail -n 1 $i/$i".trace" |sed 's/_.*//'`
		for j in `seq 0 $n_trace`; do n=`printf "%02d" $j`; ../from-traces/addresses_ordre $i/$i".trace" $n > $i/$i".trace-w"$n; ../from-traces/addresses_plus_size $i/$i".trace" $n > $i/$i".size-w"$n; done
		touch $i/order-size
		echo "Ordered "$n_trace" waves."
	fi
	echo ""
done

if [ $newOpcodes -eq 1 ]; then
  echo "Generating opcodes.prob ..."
  python2 ../opcodes_to_prob_file.py 3 opcodes opcodes.prob
fi
